#!/bin/sh

change_config="#!/bin/sh

change_dns() {	# replace \"option dns '.*'\" with \"option dns \${1}\" (parameter) in file /etc/config/network
	sed -i \"s/option dns '.*'/option dns \${1}/\" /etc/config/network
}
"
check_dok="block info | grep -q \"UUID=\\"22E1-EC06\\"\" && echo CONNECTED || echo DISCONNECTED
"
project_service="#!/bin/sh /etc/rc.common

START=01	# Start this service first
STOP=99		# End this service last

PID=\$(ps | pgrep -f -o \"/bin/sh /sbin/project_daemon\")	# Find the PID of the daemon process. -f = Match against entire command line, -o = Show the oldest process only

start() {
	if [ ! \${PID} ]; then
		(/sbin/project_daemon)&	# Start project_daemon in a subshell and put it in the background
		PID=\$(ps | pgrep -f -o \"/bin/sh /sbin/project_daemon\")
		echo Starting daemon with PID - \${PID}	# For debugging purposes
	else
		echo project_daemon is already running
	fi
}

stop() {
	if [ \${PID} ]; then
		echo Stopping daemon with PID - \${PID}
		kill \${PID}
		PID=\"\"
	else
		echo Daemon with PID - \${PID} doesn\'t exist.
	fi
}

restart() {
	echo Restarting daemon
	stop
	start
}"
project_daemon="#!/bin/sh

custom_dns=\"'9.9.9.9'\"
google_dns=\"'8.8.8.8'\"
previous_check_dok_ret=\"DEFAULT\"


disable_logging() {
	. ./usr/PROJECT/logging && disable_system_log && disable_kernel_log	# Registers the functions disable_system_log and disable_kernel_log from the script logging in the context and calls them
}

enable_logging() {
	. ./usr/PROJECT/logging && enable_system_log && enable_kernel_log	# Registers the functions enable_system_log and enable_kernel_log from the script logging in the context and calls them
}

change_config_func() {
	. ./usr/PROJECT/change_config && change_dns \"\${1}\"  # Registers the function change_dns from the script change_config in the context and calls it with the parameter \${1}
}


while true; do

	check_dok_ret=\$(/usr/PROJECT/check_dok) # Runs check_dok and returns CONNECTED or DISCONNECTED according to check_dok's logic
	
	if [ \"\${check_dok_ret}\" == \"CONNECTED\" ] && [ \"\${previous_check_dok_ret}\" != \"CONNECTED\" ]; then
		change_config_func \"\${custom_dns}\"
		disable_logging
	
	elif [ \"\${check_dok_ret}\" == \"DISCONNECTED\" ] && [ \"\${previous_check_dok_ret}\" != \"DISCONNECTED\" ]; then
		change_config_func \"\${google_dns}\"
		enable_logging
	fi

	previous_check_dok_ret=\${check_dok_ret}	# Used in an if statement to make sure the program isn't calling the same functions with the same args over and over again
done
"
base_network_config="
config interface 'loopback'
	option ifname 'lo'
	option proto 'static'
	option ipaddr '127.0.0.1'
	option netmask '255.0.0.0'

config globals 'globals'
	option ula_prefix 'fdd2:3842:7632::/48'

config interface 'lan'
	option type 'bridge'
	option ifname 'eth0'
	option proto 'static'
	option ipaddr '192.168.1.4'
	option netmask '255.255.255.0'
	option ip6assign '60'
	option gateway '192.168.1.1'
	option dns '8.8.8.8'
"
rclocal="chmod +x /etc/init.d/project_service
chmod +x /usr/PROJECT/*
chmod +x /sbin/project_daemon

exit 0"
logging="#!/bin/sh

disable_system_log() {
	/etc/init.d/log stop	# Disable system log
}

enable_system_log() {
	/etc/init.d/log start	# Enable system log
}

disable_kernel_log() {
	echo 0 4 1 7 > /proc/sys/kernel/printk	# Disable kernel log - 000 100 001 111
}

enable_kernel_log() {
	echo 7 4 1 7 > /proc/sys/kernel/printk	# Enable kernel log - 111 100 001 111
}"

set_base_network_config() {
	cat > /etc/config/network2 <<- EOM
		${base_network_config}
	EOM
}


install_packages() {
	opkg update
	opkg install kmod-usb-storage
	opkg install kmod-usb-storage-uas
	opkg install usbutils
}


install_PROJECT_files() {
	if [ ! -d "/usr/PROJECT" ]; then
		mkdir /usr/PROJECT
	fi

	cat > /usr/PROJECT/change_config <<- EOM
		${change_config}
	EOM
	cat > /usr/PROJECT/check_dok <<- EOM
		${check_dok}
	EOM
}


install_service() {
	cat > /etc/init.d/project_service <<- EOM
		${project_service}
	EOM
}


install_daemon() {
	cat > /sbin/project_daemon <<- EOM
		${project_daemon}
	EOM
}


enable_start_service() {
	/etc/init.d/project_service enable
	/etc/init.d/project_service start
}


chmod_necessary_files() {
	chmod +x /etc/init.d/project_service
	chmod +x /usr/PROJECT/*
	chmod +x /sbin/project_daemon
}


install_rclocal() {
	cat > /etc/rclocal2 <<- EOM
		${rclocal}
	EOM
}


install_logging() {
	cat > /usr/PROJECT/logging <<- EOM
		${logging}
	EOM
}


install_packages
install_PROJECT_files
install_service
install_daemon
enable_start_service
set_base_network_config
install_rclocal
install_logging
