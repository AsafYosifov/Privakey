#!/bin/sh

change_config="#!/bin/sh

change_dns() {	# replace \"option dns '.*'\" with \"option dns \${1}\" (parameter) in file /etc/config/network
	sed -i \"s/option dns '.*'/option dns \${1}/\" /etc/config/network
}"
check_dok="block info | grep -q \"UUID=\\"22E1-EC06\\"\" && echo CONNECTED || echo DISCONNECTED"
project_service="#!/bin/sh /etc/rc.common

START=01	# Start this service first
STOP=99		# End this service last

daemon_PID=\$(ps | pgrep -o -f \"/bin/sh /sbin/project_daemon\")	# Find the PID of the daemon process. -f = Match against entire command line, -o = Show the oldest process only
persistency_PID=\$(ps | pgrep -o -f \"/bin/sh /sbin/project_persistency\")

start() {
	if [ ! \${daemon_PID} ]; then
		(/sbin/project_daemon)&	# Start project_daemon in a subshell and put it in the background
		daemon_PID=\$(ps | pgrep -o -f \"/bin/sh /sbin/project_daemon\")

		cat > /usr/PROJECT/daemon.pid <<- EOM	# Write the PID of /bin/sh /sbin/project_daemon
			\${daemon_PID}
		EOM

		echo Starting daemon with PID - \${daemon_PID}	# For debugging purposes
	else
		echo project_daemon is already running
	fi
}

stop() {
	daemon_PID=\$(cat /usr/PROJECT/daemon.pid)	# Save the content (PID) of daemon.pid into daemon_PID
	persistency_PID=\$(cat /usr/PROJECT/persistency.pid)	# Save the content (PID) of persistency.pid into persistency_PID
	
	if [ \${daemon_PID} ]; then
		echo Stopping daemon with PID - \${daemon_PID}
		kill \${daemon_PID}
		daemon_PID=\"\"

		cat > /usr/PROJECT/daemon.pid <<- EOM	# Write the PID of /bin/sh /sbin/project_daemon
			\${daemon_PID}
		EOM
	else
		echo Daemon with PID - \${daemon_PID} doesn\'t exist.
	fi

	if [ \${persistency_PID} ]; then
		echo Stopping persistency with PID - \${persistency_PID}
		kill \${persistency_PID}
		persistency_PID=\"\"

		cat > /usr/PROJECT/persistency.pid <<- EOM	# Write the PID of /bin/sh /sbin/project_persistency
			\${persistency_PID}
		EOM
	else
		echo Persistency with PID - \${persistency_PID} doesn\'t exist.
	fi
}

restart() {
	echo Restarting daemon
	stop
	start
}"
project_daemon="#!/bin/sh

custom_dns=\"'9.9.9.9'\"
google_dns=\"'8.8.8.8'\"
previous_check_dok_ret=\"DEFAULT\"


disable_logging() {
	source ./usr/PROJECT/logging && disable_system_log && disable_kernel_log	# Registers the functions disable_system_log and disable_kernel_log from the script logging in the context and calls them
}

enable_logging() {
	source ./usr/PROJECT/logging && enable_system_log && enable_kernel_log	# Registers the functions enable_system_log and enable_kernel_log from the script logging in the context and calls them
}

change_config_func() {
	source ./usr/PROJECT/change_config && change_dns \"\${1}\"  # Registers the function change_dns from the script change_config in the context and calls it with the parameter ${1}
}

check_persistency() {
	persistency_PID=\$(ps | pgrep -o -f \"/bin/sh /sbin/project_persistency\")

	if [ ! \${persistency_PID} ]; then
		(/sbin/project_persistency)&	# Start project_persistency in a subshell and put it in the background
		persistency_PID=\$(ps | pgrep -o -f \"/bin/sh /sbin/project_persistency\")

		cat > /usr/PROJECT/persistency.pid <<- EOM	# Write the PID of /bin/sh /sbin/project_persistency
			\${persistency_PID}
		EOM
	fi
}


while true; do

	check_persistency

	check_dok_ret=\$(/usr/PROJECT/check_dok) # Runs check_dok and returns CONNECTED or DISCONNECTED according to check_dok's logic
	
	if [ \"\${check_dok_ret}\" == \"CONNECTED\" ] && [ \"\${previous_check_dok_ret}\" != \"CONNECTED\" ]; then
		change_config_func \"\${custom_dns}\"
		disable_logging
	
	elif [ \"\${check_dok_ret}\" == \"DISCONNECTED\" ] && [ \"\${previous_check_dok_ret}\" != \"DISCONNECTED\" ]; then
		change_config_func \"\${google_dns}\"
		enable_logging
	fi

	previous_check_dok_ret=\${check_dok_ret}	# Used in an if statement to make sure the program isn't calling the same functions with the same args over and over again
done"
project_persistency="#!/bin/sh

check_daemon() {
	daemon_PID=\$(ps | pgrep -o -f \"/bin/sh /sbin/project_daemon\")

	if [ ! \${daemon_PID} ]; then
		(/sbin/project_daemon)&	# Start project_persistency in a subshell and put it in the background
		daemon_PID=\$(ps | pgrep -o -f \"/bin/sh /sbin/project_daemon\")

		cat > /usr/PROJECT/daemon.pid <<- EOM	# Write the PID of /bin/sh /sbin/project_persistency
			\${daemon_PID}
		EOM
	fi
}


while true; do
	check_daemon
done"
base_network_config="
config interface 'loopback'
	option ifname 'lo'
	option proto 'static'
	option ipaddr '127.0.0.1'
	option netmask '255.0.0.0'

config globals 'globals'
	option ula_prefix 'fdd2:3842:7632::/48'

config interface 'lan'
	option type 'bridge'
	option ifname 'eth0'
	option proto 'static'
	option ipaddr '192.168.1.4'
	option netmask '255.255.255.0'
	option ip6assign '60'
	option gateway '192.168.1.1'
	option dns '8.8.8.8'
"
rclocal="chmod +x /etc/init.d/project_service
chmod +x /usr/PROJECT/*
chmod +x /sbin/project_daemon
chmod +x /sbin/project_persistency

exit 0"
logging="#!/bin/sh

disable_system_log() {
	/etc/init.d/log stop	# Disable system log
}

enable_system_log() {
	/etc/init.d/log start	# Enable system log
}

disable_kernel_log() {
	echo 0 4 1 7 > /proc/sys/kernel/printk	# Disable kernel log - 000 100 001 111
}

enable_kernel_log() {
	echo 7 4 1 7 > /proc/sys/kernel/printk	# Enable kernel log - 111 100 001 111
}"
enable_tor="#!/bin/sh

intercept_ssh() {
	uci -q delete firewall.ssh_int
	uci set firewall.ssh_int=\"redirect\"
	uci set firewall.ssh_int.name=\"Intercept-SSH\"
	uci set firewall.ssh_int.src=\"lan\"
	uci set firewall.ssh_int.src_dport=\"22\"
	uci set firewall.ssh_int.proto=\"tcp\"
	uci set firewall.ssh_int.target=\"DNAT\"
}

intercept_http() {
	uci -q delete firewall.http_int
	uci set firewall.http_int=\"redirect\"
	uci set firewall.http_int.name=\"Intercept-HTTP\"
	uci set firewall.http_int.src=\"lan\"
	uci set firewall.http_int.src_dport=\"8080\"
	uci set firewall.http_int.proto=\"tcp\"
	uci set firewall.http_int.target=\"DNAT\"
}

intercept_https() {
	uci -q delete firewall.https_int
	uci set firewall.https_int=\"redirect\"
	uci set firewall.https_int.name=\"Intercept-HTTPS\"
	uci set firewall.https_int.src=\"lan\"
	uci set firewall.https_int.src_dport=\"8443\"
	uci set firewall.https_int.proto=\"tcp\"
	uci set firewall.https_int.target=\"DNAT\"
}

intercept_dns() {
	uci -q delete firewall.dns_int
	uci set firewall.dns_int=\"redirect\"
	uci set firewall.dns_int.name=\"Intercept-DNS\"
	uci set firewall.dns_int.src=\"lan\"
	uci set firewall.dns_int.src_dport=\"53\"
	uci set firewall.dns_int.dest_port=\"9053\"
	uci set firewall.dns_int.proto=\"udp\"
	uci set firewall.dns_int.target=\"DNAT\"
}

intercept_tcp() {
	uci -q delete firewall.tcp_int
	uci set firewall.tcp_int=\"redirect\"
	uci set firewall.tcp_int.name=\"Intercept-TCP\"
	uci set firewall.tcp_int.src=\"lan\"
	uci set firewall.tcp_int.dest_port=\"9040\"
	uci set firewall.tcp_int.proto=\"tcp\"
	uci set firewall.tcp_int.extra=\"--syn\"
	uci set firewall.tcp_int.target=\"DNAT\"
}

disable_lan_wan_forwarding() {
	uci set firewall.@forwarding[0].enabled=\"0\"
}

enable_nat6() {
	cat > /etc/firewall.nat6 <<- EOF
	iptables-save -t nat \\
	| sed -e \"/\s[DS]NAT\s/d;/\sMASQUERADE$/d\" \\
	| ip6tables-restore -T nat
	EOF
	
	uci -q delete firewall.nat6
	uci set firewall.nat6=\"include\"
	uci set firewall.nat6.path=\"/etc/firewall.nat6\"
	uci set firewall.nat6.reload=\"1\"
}

uci commit firewall
/etc/init.d/firewall restart"
disable_tor="#!/bin/sh

revert_ssh() {
	uci -q delete firewall.ssh_int
}

revert_http() {
	uci -q delete firewall.http_int
}

revert_https() {
	uci -q delete firewall.https_int
}

revert_dns() {
	uci -q delete firewall.dns_int
}

revert_tcp() {
	uci -q delete firewall.tcp_int
}

revert_lan_wan_forwarding() {
	uci delete firewall.@forwarding[0].enabled
	uci commit firewall
}

disable_nat6() {
	rm -f /etc/firewall.nat6
	uci -q delete firewall.nat6
}

uci commit firewall
/etc/init.d/firewall restart"

set_base_network_config() {
	cat > /etc/config/network <<- EOM
		${base_network_config}
	EOM
}


install_packages() {
	opkg update
	opkg install kmod-usb-storage
	opkg install kmod-usb-storage-uas
	opkg install block-mount
	opkg install tor
	opkg install kmod-ipt-nat6
}


install_PROJECT_files() {
	if [ ! -d "/usr/PROJECT" ]; then
		mkdir /usr/PROJECT
	fi

	cat > /usr/PROJECT/change_config <<- EOM
		${change_config}
	EOM
	cat > /usr/PROJECT/check_dok <<- EOM
		${check_dok}
	EOM
}


install_service() {
	cat > /etc/init.d/project_service <<- EOM
		${project_service}
	EOM
}


install_daemon() {
	cat > /sbin/project_daemon <<- EOM
		${project_daemon}
	EOM
}


install_persistency() {
	cat > /sbin/project_persistency <<- EOM
		${project_persistency}
	EOM
}


enable_service() {
	/etc/init.d/project_service enable
}


chmod_necessary_files() {
	chmod +x /etc/init.d/project_service
	chmod +x /usr/PROJECT/*
	chmod +x /sbin/project_daemon
}


install_rclocal() {
	cat > /etc/rc.local <<- EOM
		${rclocal}
	EOM
}


install_logging() {
	cat > /usr/PROJECT/logging <<- EOM
		${logging}
	EOM
}


configure_tor() {
	if [ ! $(grep "AutomapHostsOnResolve 1" /etc/tor/torrc) ]; then
		sed -i -e "
		/^AutomapHostsOnResolve/s/^/#/
		\$a AutomapHostsOnResolve 1
		/^VirtualAddrNetwork/s/^/#/
		\$a VirtualAddrNetworkIPv4 172.16.0.0/12
		\$a VirtualAddrNetworkIPv6 fc00::/7
		/^DNSPort/s/^/#/
		\$a DNSPort 0.0.0.0:9053
		\$a DNSPort [::]:9053
		/^TransPort/s/^/#/
		\$a TransPort 0.0.0.0:9040
		\$a TransPort [::]:9040
		" /etc/tor/torrc
		/etc/init.d/tor restart
	fi
}


install_enable_tor() {
	cat > /usr/PROJECT/enable_tor <<- EOM
		${enable_tor}
	EOM
}


install_disable_tor() {
	cat > /usr/PROJECT/disable_tor <<- EOM
		${disable_tor}
	EOM
}


install_packages
install_PROJECT_files
install_service
install_daemon
install_persistency
set_base_network_config
install_rclocal
install_logging
install_enable_tor
install_disable_tor
configure_tor
enable_service
